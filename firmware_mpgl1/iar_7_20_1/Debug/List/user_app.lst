###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        10/Oct/2017  17:54:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpg_common\application\user_app.c
#    Command line =  
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpg_common\application\user_app.c
#        --preprocess=cl
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserAppInitialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserAppInitialize(void)
     90          {
     91          
     92            /* If good initialization, set state to Idle */
     93            if( 1 /* Add condition for good init */)
     94            {
     95              UserApp_StateMachine = UserAppSM_Idle;
   \                     UserAppInitialize: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000004   0x....             LDR.N    R1,??DataTable1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     96            }
     97            else
     98            {
     99              /* The task isn't properly initialized, so shut it down and don't run */
    100              UserApp_StateMachine = UserAppSM_FailedInit;
    101            }
    102          
    103          } /* end UserAppInitialize() */
   \   00000008   0x4770             BX       LR               ;; return
    104          
    105          
    106          /*----------------------------------------------------------------------------------------------------------------------
    107          Function UserAppRunActiveState()
    108          
    109          Description:
    110          Selects and runs one iteration of the current state in the state machine.
    111          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    112          may take 1ms / n to execute.
    113          
    114          Requires:
    115            - State machine function pointer points at current state
    116          
    117          Promises:
    118            - Calls the function to pointed by the state machine function pointer
    119          */

   \                                 In section .text, align 2, keep-with-next
    120          void UserAppRunActiveState(void)
    121          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    122            UserApp_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    123          
    124          } /* end UserAppRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    125          
    126          
    127          /*--------------------------------------------------------------------------------------------------------------------*/
    128          /* Private functions                                                                                                  */
    129          /*--------------------------------------------------------------------------------------------------------------------*/
    130          
    131          
    132          /**********************************************************************************************************************
    133          State Machine Function Definitions
    134          **********************************************************************************************************************/
    135          
    136          /*-------------------------------------------------------------------------------------------------------------------*/
    137          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    138          static void UserAppSM_Idle(void)
    139          {
    140          
    141          } /* end UserAppSM_Idle() */
   \                     UserAppSM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     UserApp_StateMachine
    142          
    143          
    144          /*-------------------------------------------------------------------------------------------------------------------*/
    145          /* Handle an error */
    146          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\jimmy\OneDrive\Documents\GitHub\Razor_Atmel\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    147          {
    148            UserApp_StateMachine = UserAppSM_Idle;
    149            
    150          } /* end UserAppSM_Error() */
    151          
    152          
    153          /*-------------------------------------------------------------------------------------------------------------------*/
    154          /* State to sit in if init failed */
    155          static void UserAppSM_FailedInit(void)          
    156          {
    157              
    158          } /* end UserAppSM_FailedInit() */
    159          
    160          
    161          /*--------------------------------------------------------------------------------------------------------------------*/
    162          /* End of File                                                                                                        */
    163          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   UserAppInitialize
       8   UserAppRunActiveState
         8   -- Indirect call
       0   UserAppSM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  G_u32UserAppFlags
      10  UserAppInitialize
      10  UserAppRunActiveState
       2  UserAppSM_Idle
       4  UserApp_StateMachine

 
  8 bytes in section .bss
 26 bytes in section .text
 
 26 bytes of CODE memory
  8 bytes of DATA memory

Errors: none
Warnings: 2
